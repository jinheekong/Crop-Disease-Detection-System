from flask import Flask, request, jsonify
import tensorflow as tf
import numpy as np
from PIL import Image
import io
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# 모델 로드
try:
    model = tf.keras.models.load_model(r"C:/datamodel/apple_model.h5")  # 모델 경로 설정
    print("모델이 성공적으로 로드되었습니다.")
except Exception as e:
    print(f"모델 로드 에러: {e}")
    model = None

# 이미지 전처리 함수
def preprocess_image(image):
    try:
        target_size = (128, 128)  # 모델 입력 크기 (128x128으로 수정)
        image = image.resize(target_size)  # 크기 조정
        image = np.array(image) / 255.0  # 정규화

        # 흑백 이미지 처리
        if len(image.shape) == 2:  # 흑백 이미지일 경우
            image = np.expand_dims(image, axis=-1)  # 흑백 채널 추가
            image = np.repeat(image, 3, axis=-1)  # RGB로 변환

        # 모델 입력 형태로 변환
        image = np.expand_dims(image, axis=0)  # 배치 차원 추가
        return image
    except Exception as e:
        raise ValueError(f"이미지 전처리 에러: {e}")

@app.route("/")
def home():
    return "Flask 서버가 실행 중입니다!"

@app.route("/predict", methods=["POST"])
def predict():
    if model is None:
        return jsonify({"error": "Model is not loaded"}), 500

    if 'file' not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files['file']
    try:
        image = Image.open(io.BytesIO(file.read())).convert("RGB")  # 이미지를 RGB로 변환
        processed_image = preprocess_image(image)  # 이미지 전처리
        prediction = model.predict(processed_image)  # 예측 수행

        # 병해충 여부 판단
        is_infected = prediction[0][0] > 0.5  # 0번째 출력 노드 값으로 병해충 여부 판단
        result = "병해충 의심" if is_infected else "좋음"

        # 결과 반환
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": f"Prediction error: {str(e)}"}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
